---
layout: post
title:      "Command Line Interface Blog Post"
date:       2019-06-19 00:29:46 -0400
permalink:  command_line_interface_blog_post
---


     Jesus this almost killed me. The point of this project is for us to build our own Command Line Interface(CLI) programs that scrape information off of a webpage and present it to a user in a workable format. It sounds easy, but it was not. In fact I had to downscale the scope of my project a few times before I got something that was merely overambitious, instead of preposterously enormous.
		 
		 The main issue here is the scraper. I really thought this project would be easy because I have what I consider to be a pretty good grasp on Object Oriented Programming(OOP) in Ruby. This CLI was a big smack to the ego because OOP only really served me well in the programming of the interface. Scraping is a whole other process that requires an enitrely different set of skills and I'll explain to you which ones I was missing by telling you about some of me initial attempts.
		 
		 I play a lot of Dungeons and Dragons, and an old teacher of mine runs a site that has a lot of his own content. I thought it would be fun and keep me interested if I grabbed all the information therein and put it into my CLI. I'd have a scraper that built a library full of spells, a cartographer with maps, a dojo to learn all about the skills, it would be beautiful. It WOULD be beautiful. But since I was using a homemade site with very little scraping experience, I had no idea how to write css selectors delicate enough to get done what I wanted.
		 
		 Your primary tool for scraping is something called Nokogiri, which basically breaks down html into little packets that you can use in Ruby to set variable in a manageable way. The tool is extremely useful, and by the end I was using it and ruby code to grab precisely the pieces I needed like a surgeon. Or at least a mugger who'd read up on his biology. The problem with it, like many computer related systems, is that it does EXACTLY what you tell it to. Your css selector tells Nokogiri how to trim the fat and what to ultimately give you. Precision css selectors get you a beautifully marbled center cut array of information, while a bad one gives you giblets.
		 
		 Problematically, inconsiderate site designers don't plan for you to chop up their html. So I end up with things like an extra 31 points of information on the front of a Nokogiri results array that I just have to hack away with index references. It feels sloppy. It feels bad. But it works and let me tell you nothing feels better than scraping the wrong information for an hour and then finally getting a beautiful array with ONLY the information you want and nothing else.
		 
		 Once I rescoped on the town idea, I figured I'd limit myself to just spells and feats on my teacher's website. Those are just lists, so not so much hullabaloo to sort through. But an amateur site is even less optimized for Nokogiri than normal. So trying to seperate the wheat from the chaff quickly became sisyphean. I was writing something like 25 individual scrapers to get specific snippets of information, and I was rescraping the same information over and over and over again. Still this project was too big and I too ambitious.
		 
		 Switching to a more professional site and scaling down to spells and spells alone, I was able to limit myself to two scrapers. My scraper class swiftly became more manageable and I could reliably scrape data into my spells class. The Spell class was the only straightforward part of this ordeal. Basically, once you use nokogiri to pull the information you need and store it in a hash where the keys are the same as the instance variables of your new class, it's a pretty straightforward process to call self.send to seperate that hash into instance variables and their respective values.
		 
		 The send method is a godsend. It basically lets you call a method and pass info into it. This isn't in and of iself impressive, but when combined with iteration and a hash full of values from Nokogiri scraping, it lets me call all the methods I've built attr_accessor methods for and assign them values from that hash. All in one line. It saved me probably a hundred lines of code and I couldn't be happier.
		 
		 Now that I'd pared down to something reasonable I had a measly 700 spells to scrape information from, instantiate new objects with them, scrape their individual links, populate them with instance variables, and then present via CLI. The CLI coding portion really wasn't awful. It was relatively straightforward OOP that I honestly spent a lot of time making harder than I needed to. Also, I learned a valuable lesson. It is always better to make many small methods and call them than it is to make one gigantic method and try to make it all work at once. It looks better, it feels better, and most importantly it is SO MUCH EASIER TO DEBUG. So much can go wrong in 200 lines of code and when it's all one method it becomes almost impossible to locate where the problem children are.
		 
		 All in all, this taught me a lot. Honestly more than I cockily expected it to. Ambitious goals are great but it's easier to get a simple method working and add to it than it is to pare down and refactor a bloated one. Small methods called for a larger one are easier to debug than one giant method. And when you use Nokogiri right and know what you're looking for it can be a beautiful tool. I just need to learn a little more before I can wield that scalpel. For now I'll jsut have to spend some time trimming fat with good old array manipulation.
